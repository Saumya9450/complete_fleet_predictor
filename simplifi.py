# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CO4SLpxGB2hnR16NODrqIOvo1m1HBIlM
"""



import streamlit as st
import pandas as pd
import numpy as np
import joblib
import catboost

# Load models and feature lists
model_exc, features_exc = joblib.load("excavator_model_bauxite.pkl")
model_dum, features_dum = joblib.load("dumper_model_bauxite.pkl")

# ------------- Streamlit Layout -------------
st.set_page_config(page_title="Fleet Predictor", layout="wide")
st.title("🚜 Fleet Size Estimator")

# Sidebar inputs
st.sidebar.header("🔧 Input Parameters")

bauxite_tonnage = st.sidebar.number_input("🎯 Bauxite Target (tons/year)", 1_000_000, 15_000_000, 9_000_000)
ob_factor = st.sidebar.slider("🪨 Overburden Factor", 0.2, 0.5, 0.3)
maint_pct_exc = st.sidebar.slider("🛠️ Maintenance % (Excavator)", 0.0, 0.3, 0.1)
maint_pct_dum = st.sidebar.slider("🛠️ Maintenance % (Dumper)", 0.0, 0.3, 0.1)

exc_bucket = st.sidebar.slider("⛏️ Excavator Bucket (m³)", 2.0, 10.0, 4.0)
dum_bucket = st.sidebar.slider("🚛 Dumper Bucket (m³)", 15.0, 100.0, 25.0)

fill_exc = st.sidebar.slider("⛏️ Fill Factor (Excavator)", 0.5, 1.0, 0.85)
fill_dum = st.sidebar.slider("🚛 Fill Factor (Dumper)", 0.5, 1.0, 0.85)

working_days = st.sidebar.slider("📅 Working Days", 250, 330, 300)
shifts = st.sidebar.slider("🕒 Shifts per Day", 1, 3, 3)
hours_shift = st.sidebar.slider("⏱️ Hours per Shift", 6, 8, 6)

distance = st.sidebar.slider("🛣️ Haul Distance (km)", 1.0, 4.0, 1.5)
loaded_speed = st.sidebar.slider("🚚 Loaded Speed (km/h)", 10.0, 40.0, 25.0)
empty_speed = st.sidebar.slider("🏃 Empty Speed (km/h)", 10.0, 50.0, 30.0)

eff_machine_exc = st.sidebar.slider("🔧 Excavator Machine Efficiency", 0.7, 1.0, 0.85)
eff_machine_dum = st.sidebar.slider("🔧 Dumper Machine Efficiency", 0.7, 1.0, 0.9)
eff_human = st.sidebar.slider("👷 Human Efficiency", 0.7, 1.0, 0.85)
eff_condition = st.sidebar.slider("🌦️ Condition Efficiency", 0.7, 1.0, 0.85)

# ----------- Derived Inputs --------------
available_hours = working_days * shifts * hours_shift
eff_total_exc = eff_machine_exc * eff_human * eff_condition
eff_total_dum = eff_machine_dum * eff_human * eff_condition
avg_speed = (loaded_speed + empty_speed) / 2
trip_time_min = (distance / loaded_speed) * 60 + (distance / empty_speed) * 60 + 3 + 1 + 1  # includes loading & placing

# ----------- Prepare Input DF -------------
input_dict = {
    'bauxite_tonnage': bauxite_tonnage,
    'excavator_bucket_m3': exc_bucket,
    'dumper_bucket_m3': dum_bucket,
    'fill_factor_excavator': fill_exc,
    'fill_factor_dumper': fill_dum,
    'working_days': working_days,
    'shifts_per_day': shifts,
    'hours_per_shift': hours_shift,
    'total_hours_per_year': available_hours,
    'haul_distance_km': distance,
    'loaded_speed_kmph': loaded_speed,
    'empty_speed_kmph': empty_speed,
    'trip_time_min': trip_time_min,
    'eff_machine_excavator': eff_machine_exc,
    'eff_machine_dumper': eff_machine_dum,
    'eff_human': eff_human,
    'eff_condition': eff_condition,
    'eff_total_excavator': eff_total_exc,
    'eff_total_dumper': eff_total_dum
}

input_df = pd.DataFrame([input_dict])

# ----------- Prediction ------------
pred_exc_bauxite = model_exc.predict(input_df[features_exc])[0]
pred_dum_bauxite = model_dum.predict(input_df[features_dum])[0]

# ----------- Breakdown ------------
exc_ob = pred_exc_bauxite * ob_factor
exc_maint = (pred_exc_bauxite + exc_ob) * maint_pct_exc
total_exc = pred_exc_bauxite + exc_ob + exc_maint

dum_ob = pred_dum_bauxite * ob_factor
dum_maint = (pred_dum_bauxite + dum_ob) * maint_pct_dum
total_dum = pred_dum_bauxite + dum_ob + dum_maint

# ----------- Layout -------------
col1, col2 = st.columns(2)

with col1:
    st.subheader("⛏️ Excavator Requirement")
    st.table(pd.DataFrame({
        "Category": ["Bauxite", "Overburden", "Maintenance", "Total"],
        "Excavators": [round(pred_exc_bauxite,2), round(exc_ob,2), round(exc_maint,2), round(total_exc,2)]
    }))

with col2:
    st.subheader("🚛 Dumper Requirement")
    st.table(pd.DataFrame({
        "Category": ["Bauxite", "Overburden", "Maintenance", "Total"],
        "Dumpers": [round(pred_dum_bauxite,2), round(dum_ob,2), round(dum_maint,2), round(total_dum,2)]
    }))

st.markdown("---")
st.info(f"🕒 **Estimated Trip Time:** `{trip_time_min:.2f} min` (based on distance and speed)")

